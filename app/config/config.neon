parameters:
    uploadDirectory: %appDir%/../uploads
    testBackground: false

php:
    date.timezone: Europe/Prague
    # zlib.output_compression: yes

session:
    autoStart: smart
    expiration: "+ 3 days"
application:
    errorPresenter: Error
    #catchExceptions: true
    mapping:
        *: App\*Module\*Presenter
tracy:
    email:
        - sinacek@gmail.com
        - frantisekmasa1@gmail.com
    strictMode: TRUE
    maxDepth: 6
    maxLength: 500
    bar:
        - Nextras\MailPanel\MailPanel(%tempDir%/mail-panel-latte)

console:
    url: https://h.skauting.cz
    helperSet: Symfony\Component\Console\Helper\HelperSet([
        # Helpery required by Doctrine Migrations commands
        em: Doctrine\ORM\Tools\Console\Helper\EntityManagerHelper(),
        db: Doctrine\DBAL\Tools\Console\Helper\ConnectionHelper(),

        # Helpery required by Doctrine DBAL a ORM commands
        entityManager: Doctrine\ORM\Tools\Console\Helper\EntityManagerHelper(),
        connection: Doctrine\DBAL\Tools\Console\Helper\ConnectionHelper(),
        question: Symfony\Component\Console\Helper\QuestionHelper(),
    ])

messenger:
    buses:
        commandBus:
            singleHandlerPerMessage: true
            middleware:
                - Model\Infrastructure\Services\Messenger\LoggingMiddleware(level: 'debug')
        eventBus:
            allowNoHandlers: true
        queryBus:
            singleHandlerPerMessage: true

extensions:
    skautis: Skautis\Nette\SkautisExtension
    messenger: Fmasa\Messenger\DI\MessengerExtension
    console: Contributte\Console\DI\ConsoleExtension(%consoleMode%)
    console.cache: Contributte\Console\Extra\DI\CacheConsoleExtension(%consoleMode%)

search:
    command handlers:
        in: %appDir%
        classes: Model\**\Handlers\**Handler
        tags:
            messenger.messageHandler:
                bus: commandBus

    query handlers:
        in: %appDir%
        classes: Model\**\ReadModel\**Handler
        tags:
            messenger.messageHandler:
                bus: queryBus

    event subscribers:
        in: %appDir%
        classes: Model\*\Subscribers\*Subscriber
        tags:
            messenger.messageHandler:
                bus: eventBus

    UI control factories:
        in: %appDir%
        classes: App\AccountancyModule\**\I*Factory

    services:
        in: %appDir%
        classes:
            # Main model facades
            - Model\**Service

            # Domain services
            - Model\*\Services\**

            # Aggregate repositories
            - Model\Infrastructure\Repositories\**Repository

            # Old repository namespaces - deprecated
            - Model\**\Repositories\*Repository

            # Skautis communication related services
            - Model\Skautis\**

            - Model\Services\**
        exclude:
            classes:
                - Model\Skautis\WebserviceFactory
                - Model\Skautis\ReadModel\Queries\**
                - Model\EventService
                - Model\ChitService
                - Model\ParticipantService

services:
    - Model\Common\Services\MessengerCommandBus(@messenger.commandBus.bus)
    - Model\Common\Services\MessengerQueryBus(@messenger.queryBus.bus)
    - Model\Common\Services\MessengerEventBus(@messenger.eventBus.bus)

    skautisCache:
        factory: Nette\Caching\Cache(namespace: 'skautis')
        autowired: false

    - App\Context(
          appDir: %appDir%
          wwwDir: %wwwDir%
          productionMode: %productionMode%
          showTestBackground: %testBackground%
      )
    - App\RouterFactory

    - Model\Cashbook\ReadModel\SpreadsheetFactory
    - Model\Cashbook\ReadModel\QueryHandlers\Pdf\SheetChitsGenerator

    - factory: Model\Event\ReadModel\QueryHandlers\EventScopesHandler(@skautis.event, @skautisCache)
      tags:
          messenger.messageHandler:
              bus: queryBus

    - factory: Model\Event\ReadModel\QueryHandlers\EventTypesHandler(@skautis.event, @skautisCache)
      tags:
          messenger.messageHandler:
              bus: queryBus

    - factory: Model\Event\ReadModel\QueryHandlers\CampStatesHandler(@skautis.event, @skautisCache)
      tags:
          messenger.messageHandler:
              bus: queryBus

    - factory: Model\Event\ReadModel\QueryHandlers\EventStatesHandler(@skautis.event, @skautisCache)
      tags:
          messenger.messageHandler:
              bus: queryBus

    - Model\Services\PdfRenderer(%tempDir%)

    - Model\PaymentService
    - Model\Payment\BankAccountService(fioCache: @fio.cache)

    - Model\Google\GoogleService(%google.credentials%, %google.redirectUri%)

    - GuzzleHttp\Client({ timeout: 3 }) # used for API calls to FIO api

    fio.client:
        factory: Model\Bank\Fio\FioClient
        autowired: false
    fio.cache: Nette\Caching\Cache
    - Model\Payment\Fio\CachingClientDecorator(@fio.client, @fio.cache)
    - Model\Bank\Fio\DownloaderFactory

    router: @App\RouterFactory::createRouter

    - Model\ParticipantService
    - Model\Skautis\Factory\EventFactory
    - Model\StatisticsService

    # Model
    - Model\Skautis\Auth\SkautisAuthorizator(@skautis.webservice.user)

    # Skautis repositories
    unitRepository:
        factory: Model\Skautis\UnitRepository(@skautis.org)
        autowired: false
    - Model\Infrastructure\Services\Unit\CachedUnitRepository(@unitRepository)
    - Model\Skautis\Common\Repositories\UserRepository(@skautis.webservice.user, @skautis.org)
    - Model\Skautis\EventRepository(@skautis.event)
    - Model\Skautis\CampRepository(@skautis.cached.event)
    - Model\Skautis\EducationRepository(@skautis.cached.event)
    - Model\Skautis\Cashbook\Repositories\CampCategoryRepository(@skautis.cached.event)
    - Model\Skautis\Cashbook\Repositories\EducationCategoryRepository(@skautis.cached.grants)
    - Model\Infrastructure\Repositories\Mail\GoogleRepository


    - factory: Model\Cashbook\ReadModel\QueryHandlers\EventParticipantListQueryHandler
      tags:
          messenger.messageHandler:
              bus: queryBus

    # Skautis read model
    - factory: Model\Skautis\ReadModel\QueryHandlers\EducationBudgetQueryHandler(@skautis.cached.grants)
      tags:
          messenger.messageHandler:
              bus: queryBus
    - factory: Model\Skautis\ReadModel\QueryHandlers\CampBudgetQueryHandler(@skautis.cached.event)
      tags:
          messenger.messageHandler:
              bus: queryBus
    - factory: Model\Skautis\ReadModel\QueryHandlers\EventStatisticsQueryHandler(@skautis.cached.event)
      tags:
          messenger.messageHandler:
              bus: queryBus

    - League\Flysystem\Filesystem(League\Flysystem\Local\LocalFilesystemAdapter(%uploadDirectory%))
    - Model\Infrastructure\Services\Common\FlysystemScanStorage

    # Skautis webservices
    skautis.org: Model\Skautis\WebserviceFactory::createCached('org')
    skautis.event: Model\Skautis\WebserviceFactory::create('event')
    skautis.webservice.user: Model\Skautis\WebserviceFactory::createCached('user')
    skautis.cached.event: Model\Skautis\WebserviceFactory::createCached('event')
    skautis.cached.grants: Model\Skautis\WebserviceFactory::createCached('Grants')

    nette.latteFactory:
        setup:
            - addFilterLoader([App\AccountancyModule\AccountancyHelpers, loader])

    @Skautis\Wsdl\WsdlManager:
        setup:
            - @Model\Infrastructure\Services\SkautisCallListener::register

    nette.mailer: Nextras\MailPanel\FileMailer(%tempDir%/mail-panel-mails)

    - Model\Mail\MailerFactory(@nette.mailer, %sendEmail%)

    - Model\Infrastructure\Log\UserContextProvider

    - factory: Monolog\Logger
      arguments:
          name: hskauting
          handlers: [] # We register handlers via setHandlers and pushHandler later
          processors:
              - Model\Infrastructure\Log\Monolog\UserContextProcessor()
              - Model\Infrastructure\Log\Monolog\FormContextProcessor()

decorator:
    Monolog\Logger:
        setup:
            - pushHandler(Monolog\Handler\RotatingFileHandler(%logDir%/log.log, 90, Monolog\Logger::INFO))

    Doctrine\DBAL\Logging\LoggerChain:
        setup:
            - addLogger(Model\Infrastructure\SQLLogger())

includes:
    - model/doctrine.neon
    - components.neon
    - sentry.neon
