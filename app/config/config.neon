parameters:
    uploadDirectory: %appDir%/../uploads
    testBackground: false

php:
    date.timezone: Europe/Prague
    # zlib.output_compression: yes

session:
    autoStart: smart
    expiration: "+ 3 days"
application:
    errorPresenter: Error
    #catchExceptions: true
    mapping:
        *: App\*Module\*Presenter
    debugger:
        email:
            - sinacek@gmail.com
            - frantisekmasa1@gmail.com
        strictMode: TRUE
        maxDepth: 6
        maxLen: 500
tracy:
    bar:
        - Nextras\MailPanel\MailPanel(%tempDir%/mail-panel-latte)

console:
    url: https://h.skauting.cz

messageBus:
    commandBus:
    	middlewares:
    		before:
    			- @loggingMiddleware
    eventBus:
    queryBus:

proxy:
    default: off
    proxyDir: %tempDir%/proxies

extensions:
    autoDI: Fmasa\AutoDI\DI\AutoDIExtension
    skautis: Skautis\Nette\SkautisExtension
    messageBus: eGen\MessageBus\DI\MessageBusExtension
    console: Kdyby\Console\DI\ConsoleExtension
    proxy: Lookyman\Nette\Proxy\DI\ProxyExtension

autoDI:
    services:
        # Main model facades
        - class: Model\**Service
          exclude: 'Model\{Event,Chit,Participant}Service' # mutable services

        # Domain services
        - class: Model\*\Services\**

        # Aggregate repositories
        - class: Model\Infrastructure\Repositories\**Repository

        # Old repository namespaces - deprecated
        - class: Model\**\Repositories\*Repository

        # Old DAOs - deprecated
        - class: Model\*Table

        # Domain event subscribers
        - class: Model\*\Subscribers\*Subscriber
          tags: [eventBus.subscriber]

        # Skautis communication related services
        - class: Model\Skautis\**
          exclude:
              - Model\Skautis\WebserviceFactory
              - Model\Skautis\ReadModel\Queries\**

        # Factories for mutable services
        - implement: 'Model\I{Event,Chit,Participant}ServiceFactory'

        # Utility services
        - class: Model\Services\**

        # Command handlers
        - class: Model\**\Handlers\**Handler
          tags: [commandBus.handler]

        - class: 'Model\Event\ReadModel\QueryHandlers\{EventScopes,EventTypes,CampStates,EventStates}Handler'
          arguments: [@skautis.event, @skautisCache]
          tags: [queryBus.handler]

        # Query handlers
        - class: Model\**\ReadModel\**
          tags: [queryBus.handler]
          exclude:
              - Model\*\ReadModel\Queries\**

        - class: Model\Infrastructure\Services\**

services:
    loggingMiddleware: SimpleBus\Message\Logging\LoggingMiddleware(level: 'debug')

    skautisCache:
        factory: Nette\Caching\Cache(namespace: 'skautis')
        autowired: false

    - App\RouterFactory

    - Model\Services\PdfRenderer(%tempDir%)

    - Model\PaymentService
    - Model\Payment\BankAccountService(fioCache: @fio.cache)

    - GuzzleHttp\Client({ timeout: 3 }) # used for API calls to FIO api

    fio.client:
        class: Model\Bank\Fio\FioClient
        autowired: false
    fio.cache: Nette\Caching\Cache
    - Model\Payment\Fio\CachingClientDecorator(@fio.client, @fio.cache)
    - Model\Bank\Fio\DownloaderFactory

    router: @App\RouterFactory::createRouter

    eventService: Model\EventEntity("General")
    campService: Model\EventEntity("Camp")
    unitAccountService: Model\EventEntity("Unit")
    - Model\Skautis\Factory\EventFactory
    - Model\StatisticsService

    # Model
    - Model\Skautis\Auth\SkautisAuthorizator(@skautis.webservice.user)

    # Skautis repositories
    unitRepository:
        factory: Model\Skautis\UnitRepository(@skautis.org)
        autowired: false
    - Model\Infrastructure\Services\Unit\CachedUnitRepository(@unitRepository)
    - Model\Skautis\Common\Repositories\UserRepository(@skautis.webservice.user, @skautis.org)
    - Model\Skautis\EventRepository(@skautis.event)
    - Model\Skautis\CampRepository(@skautis.cached.event)
    - Model\Skautis\Cashbook\Repositories\CampCategoryRepository(@skautis.cached.event)
    - Model\Infrastructure\Repositories\Mail\GoogleRepository(%google.credentials%, %google.redirectUri%)

    - class: Model\Cashbook\ReadModel\QueryHandlers\EventParticipantListQueryHandler
      tags: [queryBus.handler]

    # Skautis read model
    - class: Model\Skautis\ReadModel\QueryHandlers\CampBudgetQueryHandler(@skautis.cached.event)
      tags: [queryBus.handler]
    - class: Model\Skautis\ReadModel\QueryHandlers\EventStatisticsQueryHandler(@skautis.cached.event)
      tags: [queryBus.handler]

    - League\Flysystem\Filesystem(League\Flysystem\Adapter\Local(%uploadDirectory%))
    - Model\Infrastructure\Services\Common\FlysystemScanStorage

    # Skautis webservices
    skautis.org:
        factory: Model\Skautis\WebserviceFactory::createCached('org')
        tags: [lookyman.lazy]
    skautis.event:
        factory: Model\Skautis\WebserviceFactory::create('event')
        tags: [lookyman.lazy]
    skautis.webservice.user:
        factory: Model\Skautis\WebserviceFactory::createCached('user')
        tags: [lookyman.lazy]
    skautis.cached.event:
        factory: Model\Skautis\WebserviceFactory::createCached('event')

    nette.latteFactory:
        setup:
            - addFilter(null, [App\AccountancyModule\AccountancyHelpers, loader])

    @Skautis\Wsdl\WsdlManager:
        setup:
            - @Model\Infrastructure\Services\SkautisCallListener::register

    nette.mailer: Nextras\MailPanel\FileMailer(%tempDir%/mail-panel-mails)

    - Model\Mail\MailerFactory(@nette.mailer, %sendEmail%)

    - class: Doctrine\DBAL\Logging\LoggerChain
      setup:
      	  - addLogger(Model\Infrastructure\SQLLogger())

    - Model\Infrastructure\Log\UserContextProvider

    - factory: Monolog\Logger
      arguments:
          name: hskauting
          handlers: [] # We register handlers via setHandlers and pushHandler later
          processors:
              - Model\Infrastructure\Log\Monolog\UserContextProcessor()
              - Model\Infrastructure\Log\Monolog\FormContextProcessor()

    - App\Console\LintLatte(%appDir%)

decorator:
    Doctrine\DBAL\Configuration:
        setup:
            - setSQLLogger()

    Monolog\Logger:
        setup:
            - pushHandler(Monolog\Handler\RotatingFileHandler(%logDir%/log.log, 90, Monolog\Logger::INFO))

includes:
    - model/doctrine.neon
    - components.neon
    - sentry.neon
